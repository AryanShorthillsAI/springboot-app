name: Build

on:
  push:
    branches:
      - deploy-to-ec2

  workflow_dispatch:

jobs: 
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Run Tests
        run: mvn clean test

  build:
    runs-on: ubuntu-latest
    needs: test # Run only if tests pass

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR with Maven
        run: |
          mvn clean package # Build JAR
          find target -name "*.jar"
          
      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-app
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs:  build
    steps:
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: springboot-app
          path: target

      - name: Remove existing files (.jar, app.log)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            rm -f app.log
            rm -rf target
        
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/ubuntu/app/target"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: | 
            echo "ðŸš€ Starting deployment..."

            # Navigate to the correct directory
            cd /home/ubuntu/app/target           

            chmod +x *.jar

            # Stop existing process
            sudo fuser -k 80/tcp

            echo "ðŸŸ¢ Starting Spring Boot application..."
            nohup sudo java -jar /home/ubuntu/app/target/demo-0.0.1-SNAPSHOT.jar --server.port=80 > /home/ubuntu/app/app.log 2>&1 &

            sleep 20

            echo "âœ… Spring Boot application deployed successfully!"

